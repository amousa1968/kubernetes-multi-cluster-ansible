name: Ansible CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  ANSIBLE_VERSION: "11.1.0"

jobs:
  # Lint and validate Ansible code
  lint:
    name: Lint Ansible Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible==${{ env.ANSIBLE_VERSION }}

      - name: Install Ansible collections
        run: ansible-galaxy collection install -r collections/requirements.yml

      - name: Run ansible-lint
        uses: ansible/ansible-lint@main
        with:
          args: --fix

  # Syntax check for all playbooks
  syntax-check:
    name: Syntax Check
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible==${{ env.ANSIBLE_VERSION }}

      - name: Install Ansible collections
        run: ansible-galaxy collection install -r collections/requirements.yml

      - name: Install roles
        run: ansible-galaxy install -r requirements.yml

      - name: Check syntax of main playbooks
        run: |
          ansible-playbook --syntax-check site.yml
          ansible-playbook --syntax-check cluster-init.yml
          ansible-playbook --syntax-check cluster-join.yml

  # Validate inventory files
  validate-inventory:
    name: Validate Inventory
    runs-on: ubuntu-latest
    needs: syntax-check
    strategy:
      matrix:
        environment: [staging, production]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible==${{ env.ANSIBLE_VERSION }}

      - name: Validate ${{ matrix.environment }} inventory
        run: |
          if [ -f "inventories/${{ matrix.environment }}/hosts" ]; then
            ansible-inventory -i inventories/${{ matrix.environment }}/hosts --list
          else
            echo "Inventory file for ${{ matrix.environment }} not found, skipping validation"
          fi

  # Security scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate-inventory
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to staging (only on main branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [security-scan]
    environment: staging
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible==${{ env.ANSIBLE_VERSION }}

      - name: Install Ansible collections
        run: ansible-galaxy collection install -r collections/requirements.yml

      - name: Install roles
        run: ansible-galaxy install -r requirements.yml

      - name: Deploy to staging environment
        run: |
          echo "ðŸš€ Starting deployment to staging environment"
          # Add your staging deployment commands here
          # ansible-playbook -i inventories/staging/hosts site.yml --tags common,kubernetes
          echo "âœ… Staging deployment completed"

  # Deploy to production (only on main branch with manual approval)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    environment: production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible==${{ env.ANSIBLE_VERSION }}

      - name: Install Ansible collections
        run: ansible-galaxy collection install -r collections/requirements.yml

      - name: Install roles
        run: ansible-galaxy install -r requirements.yml

      - name: Deploy to production environment
        run: |
          echo "ðŸš€ Starting deployment to production environment"
          # Add your production deployment commands here
          # ansible-playbook -i inventories/production/hosts site.yml --tags common,kubernetes
          echo "âœ… Production deployment completed"
